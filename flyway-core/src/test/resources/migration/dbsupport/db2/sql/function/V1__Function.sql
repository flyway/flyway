--
-- Copyright 2010-2017 Boxfuse GmbH
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--         http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

CREATE FUNCTION TEST_FUNC(PARAM1 INTEGER)
  RETURNS INTEGER
LANGUAGE SQL
  RETURN
  1;

CREATE FUNCTION TEST_FUNC(PARAM1 INTEGER, PARAM2 INTEGER)
  RETURNS INTEGER
LANGUAGE SQL
  RETURN
  1;

CREATE FUNCTION TEST_FUNC(PARAM1 INTEGER, PARAM2 INTEGER, PARAM3 INTEGER)
  RETURNS INTEGER
LANGUAGE SQL
  RETURN
  1;

CREATE OR REPLACE FUNCTION F_CHAR(ARG CHAR(3))
  RETURNS INTEGER
LANGUAGE SQL
  RETURN 1;

CREATE OR REPLACE FUNCTION F_VARCHAR(ARG VARCHAR(3))
  RETURNS INTEGER
LANGUAGE SQL
  RETURN 1;

CREATE OR REPLACE FUNCTION F_GRAPHIC(ARG GRAPHIC(3))
  RETURNS INTEGER
LANGUAGE SQL
  RETURN 1;

CREATE OR REPLACE FUNCTION F_VARGRAPHIC(ARG VARGRAPHIC(3))
  RETURNS INTEGER
LANGUAGE SQL
  RETURN 1;

CREATE OR REPLACE FUNCTION F_DECIMAL(ARG DECIMAL(3, 2))
  RETURNS INTEGER
LANGUAGE SQL
  RETURN 1;

CREATE OR REPLACE FUNCTION F_FLOAT(ARG FLOAT(3))
  RETURNS INTEGER
LANGUAGE SQL
  RETURN 1;

CREATE OR REPLACE FUNCTION F_DECFLOAT16(ARG DECFLOAT(16))
  RETURNS INTEGER
LANGUAGE SQL
  RETURN 1;

CREATE OR REPLACE FUNCTION F_DECFLOAT34(ARG DECFLOAT(34))
  RETURNS INTEGER
LANGUAGE SQL
  RETURN 1;

CREATE OR REPLACE FUNCTION F_BINARY(ARG BINARY LARGE OBJECT(3))
  RETURNS INTEGER
LANGUAGE SQL
  RETURN 1;

CREATE OR REPLACE FUNCTION F_NVARCHAR(ARG NVARCHAR(3))
  RETURNS INTEGER
LANGUAGE SQL
  RETURN 1;

CREATE FUNCTION COMM_AMOUNT(SALARY DEC(9,2))
  RETURNS DEC(9,2)
LANGUAGE SQL READS SQL DATA
  BEGIN ATOMIC
    DECLARE REMAINDER DEC(9,2) DEFAULT 0.0;--
    DECLARE COMM_PAID DEC(9,2) DEFAULT 0.0;--
    DECLARE COMM_INCR INT      DEFAULT 1;--
    DECLARE MAX_COMM  DEC(9,2) DEFAULT 0.0;--

    IF (SALARY <= 0) THEN
      SIGNAL SQLSTATE '75000'
      SET MESSAGE_TEXT = 'Bad Salary';--
    END IF;--

    SET REMAINDER = SALARY;--

    L1: WHILE REMAINDER > 0.0 DO
    SET COMM_PAID = COMM_PAID + (COMM_INCR * 500.00);--
    SET REMAINDER = REMAINDER-(COMM_INCR * 5000.00);--
    SET COMM_INCR = COMM_INCR + 1;--
  END WHILE L1;--

    SET MAX_COMM = 100.00;--
    IF (COMM_PAID > MAX_COMM) THEN
      SET COMM_PAID = MAX_COMM;--
    END IF;--
    RETURN COMM_PAID;--
  END;

CREATE FUNCTION TEST_FUNC ( PARAM1 char(16), PARAM2 char(36) )
  RETURNS INTEGER
LANGUAGE SQL
  RETURN 1;